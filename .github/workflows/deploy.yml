name: Deploy MkDocs with Poetry

on:
  pull_request:
    types:
      - closed
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  pull-requests: write  

jobs:
  deploy:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.title, 'chore(master): release '))    
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
      repo_owner_lower: ${{ env.REPO_OWNER_LOWER }}
      repo_name: ${{ env.REPO_NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false  # Use system Python for easier dependency resolution
          poetry install --no-interaction --no-root  # Install dependencies from pyproject.toml

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: dmb-docs-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            dmb-docs-${{ runner.os }}-

      - name: Extract version 
        id: setup_env_vars
        run: |
          VERSION=$(grep -E '^version *= *' pyproject.toml | head -n 1 | cut -d '"' -f2)
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(basename "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "REPO_OWNER_LOWER=$REPO_OWNER_LOWER" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Build MkDocs
        run: poetry run mkdocs build

      - name: Deploy to DMB_Docs gh-pages
        run: poetry run mkdocs gh-deploy --force

      - name: Mirror to DMB gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: I-am-PUID-0/DMB
          personal_token: ${{ secrets.DMB_MIRROR_TOKEN }}
          publish_dir: ./site
          publish_branch: gh-pages

  release:
    needs: deploy
    if: github.ref_name == 'master'
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
    env:
      VERSION: ${{ needs.deploy.outputs.version }}
      REPO_OWNER_LOWER: ${{ needs.deploy.outputs.repo_owner_lower }}
      REPO_NAME: ${{ needs.deploy.outputs.repo_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
            if gh release view "${{ env.VERSION }}" --repo ${{ github.repository }}; then
              echo "Release already exists for version ${{ needs.deploy.outputs.version }}"
              echo "release_exists=true" >> $GITHUB_ENV
              echo "release_exists=true" >> $GITHUB_OUTPUT
            else
              echo "Release does not exist for version ${{ needs.deploy.outputs.version }}"
              echo "release_exists=false" >> $GITHUB_ENV
              echo "release_exists=false" >> $GITHUB_OUTPUT
            fi
      - name: Create Release with CHANGELOG Notes
        if: env.release_exists == 'false'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            RELEASE_NOTES=$(sed -n '/^## \[[0-9]\+\.[0-9]\+\.[0-9]\+\](/,$p' CHANGELOG.md | sed -n '1!{/^## \[/q;p}')
            gh release create ${{ env.VERSION }} \
              --repo ${{ github.repository }} \
              --title "Release ${{ env.VERSION }}" \
              --notes "$RELEASE_NOTES" \
              --draft=false \
              --prerelease=false


  announce:
    needs: [release, deploy]
    if: needs.release.outputs.release_exists == 'false' && github.ref_name == 'master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Post announcement to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          VERSION: ${{ needs.deploy.outputs.version }}
        run: |
          RELEASE_NOTES=$(sed -n '/^## \[[0-9]\+\.[0-9]\+\.[0-9]\+\](/,$p' CHANGELOG.md | sed -n '1!{/^## \[/q;p}')
          ANNOUNCEMENT_BODY="<@&1360241608649605240> ðŸš€ **New Release: Version [${{ env.VERSION }}]**${RELEASE_NOTES}"
          ESCAPED_BODY=$(echo "$ANNOUNCEMENT_BODY" | jq -Rsa .)
          curl -H "Content-Type: application/json" \
               -d "{\"content\": $ESCAPED_BODY, \"flags\": 4}" \
               $DISCORD_WEBHOOK_URL
          
  update-pr-label:
    needs: [release, deploy]
    if: needs.release.outputs.release_exists == 'false' && github.ref_name == 'master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "Remove 'autorelease: pending' label from all merged PRs"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBERS=$(gh pr list --state merged --base master --json number,labels --jq '[.[] | select(.labels[].name == "autorelease: pending") | .number] | @sh')
          
          if [[ -n "$PR_NUMBERS" ]]; then
            for PR_NUMBER in $PR_NUMBERS; do
              PR_NUMBER=$(echo $PR_NUMBER | tr -d "'") # Remove quotes from jq output
              echo "Updating PR #$PR_NUMBER..."
              gh pr edit $PR_NUMBER --remove-label "autorelease: pending"
              gh pr edit $PR_NUMBER --add-label "autorelease: tagged"
              echo "Updated PR #$PR_NUMBER with 'autorelease: tagged'"
            done
          else
            echo "No merged PRs found with 'autorelease: pending' label."
          fi